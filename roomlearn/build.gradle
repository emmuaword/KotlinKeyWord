if (isRunAlone.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        if (isRunAlone.toBoolean()) {
            applicationId "com.weiyi.roomlearn"
        }
        //ARouter
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }
    sourceSets {
        main {
            // 单独调试与集成调试时使用不同的 AndroidManifest.xml 文件
            if (isRunAlone.toBoolean()) {
                manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildTypes {
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        lintOptions { abortOnError false }
    }
    dataBinding {
        enabled = true
    }
//    如果不设置的话，需要再database类上配置exportSchema = false
//    javaCompileOptions {
//        annotationProcessorOptions {
//            arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
//        }
//    }
}

dependencies {
    implementation project(path: ':basemodule')
    implementation 'androidx.appcompat:appcompat:1.3.0'
    //noinspection LifecycleAnnotationProcessorWithJava8
    kapt 'android.arch.lifecycle:compiler:1.1.1'
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    annotationProcessor "androidx.room:room-compiler:2.3.0"
    kapt 'android.arch.persistence.room:compiler:1.1.1'

    implementation "androidx.core:core-ktx:1.6.0-beta02"
//    api "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0-alpha01"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0-alpha01"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.0-alpha01"

//    //若此module需要被主工程依赖，annotationProcessor亦需在主工程引入
//    annotationProcessor "android.arch.persistence.room:compiler:1.1.1"

    // optional - RxJava support for Room
//    implementation "androidx.room:room-rxjava2:2.2.5"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:2.3.0"

    // optional - Coroutines support for Room
    implementation "androidx.room:room-coroutines:2.1.0-alpha04"


    //api与compiler匹配使用，使用最新版可以保证兼容
    implementation 'com.alibaba:arouter-api:1.5.0'
    kapt 'com.alibaba:arouter-compiler:1.5.1'
}